HW_2 Postman


1) http://162.55.220.72:5005/first 
1. Отправить запрос. ("method": "GET") +
2. Статус код 200 +
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
PASS Status code is 200

3. Проверить, что в body приходит правильный string.
pm.test("Body is correct", function () {
pm.response.to.have.body("This is the first responce from server!");
});
PASS Body is correct





2) http://162.55.220.72:5005/user_info_3
1. Отправить запрос. + (ставим метод Пост)

2. Статус код 200
pm.test("Status code is 200", function () {
pm.response.to.have.status(200);
});
PASS Status code is 200

3. Спарсить response body в json.
"let jsonData = JSON.parse(responseBody);"
"let jsonData = pm.response.json();"

4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Your test name", function () { 
pm.expect(jsonData.name).to.eql("Lena");
});
5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Your test age", function () { 
pm.expect(jsonData.age).to.eql("27");
});
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Your test salary", function () { 
pm.expect(jsonData.salary).to.eql("800");
});
7. Спарсить request.
let req_data = request.data.name
8. Проверить, что name в ответе равно name s request (name забрать из request.)
"pm.test(\"Name is correct\", function () {"
"pm.expect(jsonData.name).to.eql(req_data.name);"
9. Проверить, что age в ответе равно age s request (age забрать из request.)
"pm.test(\"Age is correct\", function () {"
"pm.expect(jsonData.age).to.eql(req_data.age);"
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
"pm.test(\"Salary is correct\", function () {"
"pm.expect(jsonData.salary).to.eql(req_data.salary);"
11. Вывести в консоль параметр family из response.
"console.log(resp_JSON.family)"
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
"pm.test(u_salary_1_5_year, function () {"
"pm.expect(resp_JSON.family.u_salary_1_5_year).to.eql(salary*4);"
"});"



3) http://162.55.220.72:5005/object_info_3
1. Отправить запрос. +Постом
2. Статус код 200 +
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
3. Спарсить response body в json.
"let resp_data = pm.response.json();"
4. Спарсить request.
"let req_data = pm.request.url.query.toObject();"
5. Проверить, что name в ответе равно name s request (name забрать из request.)
"pm.test(\"Your test name\", function () {"
"pm.expect(resp_data.name).to.eql(req_data.name);"
"});"
6. Проверить, что age в ответе равно age s request (age забрать из request.)
"pm.test(\"Your test age\", function () {"
"pm.expect(resp_data.age).to.eql(req_data.age);"
"});"
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
"pm.test(\"Your test salary\", function () {"
"pm.expect(resp_data.salary).to.eql(req_data.salary);"
"});"
8. Вывести в консоль параметр family из response.
"console.log(resp_data.family);"
9. Проверить, что у параметра dog есть параметры name.
"pm.test(\"Dog has name param\", function() {"
"pm.expect(resp_data.family.pets.dog).to.have.property(\"name\");"
"});"
10. Проверить, что у параметра dog есть параметры age.
"pm.test(\"Dog has age param\", function() {"
"pm.expect(resp_data.family.pets.dog).to.have.property(\"age\");"
"});"
11. Проверить, что параметр name имеет значение Luky.
"pm.test(\"Dog has name param\", function() {"
"pm.expect(resp_data.family.pets.dog).to.have.property(\"Luky\");"
"});"

12. Проверить, что параметр age имеет значение 4.
"pm.test(\"Dog has right age\", function() {"
"pm.expect(resp_data.family.pets.dog.age).to.eql(4);"
"});"



4) http://162.55.220.72:5005/object_info_4
1. Отправить запрос. +
2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
"let resp_data = pm.response.json();\r"

4. Спарсить request.
"let req_data = pm.request.url.query.toObject();\r"

5. Проверить, что name в ответе равно name s request (name забрать из request.)
"pm.test(\"Your name is Alexandra\", function () {\"
"pm.expect(resp_data.name).to.eql(req_data.name);\"
"});"

6. Проверить, что age в ответе равно age из request (age забрать из request.)
"pm.test(\"Your age is 27\", function() {"
"pm.expect(resp_data.age).to.eql(+req_data.age);"
"});"

7. Вывести в консоль параметр salary из request.
"console.log(\"Salary from request: \", req_data.salary);"

8. Вывести в консоль параметр salary из response.
"console.log(\"Salary from response: \", resp_data.salary);"

9. Вывести в консоль 0-й элемент параметра salary из response.
"console.log(\"Salary[0] from response: \", resp_data.salary[0]);"

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
"console.log(\"Salary[1] from response: \", resp_data.salary[1]);"

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
"console.log(\"Salary[2] from response: \", resp_data.salary[2]);"

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
"pm.test(\"Salary is correct\", function () {"
"pm.expect(resp_data.salary[0]).to.eql(+req_data.salary);"
"});"

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
"pm.test(\"Salary2 is correct\", function () {\r"
"pm.expect(+resp_data.salary[1]).to.eql(req_data.salary*2);\r"
"});"

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
"pm.test(\"Salary3 is correct\", function () {\r"
"pm.expect(+resp_data.salary[2]).to.eql(req_data.salary*3);\r"
"});\r"


15. Создать в окружении переменную name
"pm.environment.set(\"name\", resp_data.name);"

16. Создать в окружении переменную age
"pm.environment.set(\"age\", resp_data.age);"

17. Создать в окружении переменную salary
"pm.environment.set(\"salary\", resp_data.salary[0]);"

18. Передать в окружение переменную name
"pm.collectionVariables.set(\"name\", jsonReqest[0].value);\r",
19. Передать в окружение переменную age
"pm.collectionVariables.set(\"age\", jsonReqest[1].value);\r",
20. Передать в окружение переменную salary
"pm.collectionVariables.set(\"salary\", jsonReqest[2].value);\r"
21. Написать цикл который выведет в консоль по порядку элементы списка из 
параметра salary.
"for (let count = 0; count < jsonData.salary.length; count += 1) {\r",
"console.log('salary count', jsonData.salary[count]);\r",
"}"

5) http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос. +
5. Статус код 200 + 
6. Спарсить response body в json.
"let resp_body = pm.response.json();\r",
7. Спарсить request.
"let req_data = request.data;\r",

8. Проверить, что json response имеет параметр start_qa_salary
"pm.test(\"Response has start_qa_salary\", function () {"
"pm.expect(resp_body).to.have.property(\"start_qa_salary\");"
"});"
9. Проверить, что json response имеет параметр qa_salary_after_6_months
"pm.test(\"Response has qa_salary_after_6_months\", function () {"
"pm.expect(resp_body).to.have.property(\"qa_salary_after_6_months\");"
"});"
10. Проверить, что json response имеет параметр qa_salary_after_12_months
"pm.test(\"Response has qa_salary_after_12_months\", function () {"
"pm.expect(resp_body).to.have.property(\"qa_salary_after_6_months\");"
"});"
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
"pm.test(\"Response has qa_salary_after_1.5_year\", function () {"
"pm.expect(resp_body).to.have.property(\"qa_salary_after_1.5_year\");"
"});"
12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
"pm.test(\"Response has qa_salary_after_3.5_year\", function () {"
"pm.expect(resp_body).to.have.property(\"qa_salary_after_3.5_year\");"
"});"
13. Проверить, что json response имеет параметр person
"pm.test(\"Response has person\", function () {"
"pm.expect(resp_body).to.have.property(\"person\");"
"});"
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
"pm.test(\"Start_qa_salary is correct\", function () {"
"pm.expect(resp_body.start_qa_salary).to.eql(+req_data.salary);"
"});"
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
"pm.test(\"Qa_salary_after_6_months is correct\", function () {\r",
"pm.expect(resp_body.qa_salary_after_6_months).to.eql(req_data.salary*2);\r",
"});\r",
16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
"pm.test(\"Qa_salary_after_12_months is correct\", function () {\r",
"pm.expect(resp_body.qa_salary_after_12_months).to.eql(req_data.salary*2.7);\r",
"});\r",
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
"pm.test(\"Qa_salary_after_1.5_year is correct\", function () {\r"
"pm.expect(resp_body['qa_salary_after_1.5_year']).to.eql(req_data.salary*3.3);\r"
"});\r"
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
"pm.test(\"Qa_salary_after_3.5_years is correct\", function () {\r",
"pm.expect(resp_body['qa_salary_after_3.5_years']).to.eql(req_data.salary*3.8);\r",
"});\r",
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
"pm.test(\"Salary is correct\", function () {\r",
"pm.expect(resp_body.person.u_name[1]).to.eql(+req_data.salary);\r"
"});\r",
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
"pm.test(\"Age is correct\", function () {\r"
"pm.expect(resp_body.person.u_age).to.eql(+req_data.age);\r"
"});\r"
21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
"pm.test(\"u_salary_5_years is correct\", function () {\r",
"   pm.expect(resp_body.person.u_salary_5_years).to.eql(req_data.salary*4.2);\r",
"});\r",
22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
// the second way:\r",
"// Object.keys(resp_body.person).forEach(function(i ){\r",
"// console.log(i, resp_body.person[i]);\r",
"// });"

"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		},
		{
			"key": "salary",
			"value": ""
		}
	]
}




